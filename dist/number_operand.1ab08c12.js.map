{"version":3,"sources":["js/operand/abstract_operand.js","js/operand/number_operand.js"],"names":["AbstractOperand","operand","Error","NumberOperand","input","inputs","push","inputText","getInputText","length","parseFloat","size","splice","reduce","result","String"],"mappings":";;;;;;;ACAA;;;;;;IDAqBA;AACnB,2BAAYC,OAAZ,EAAqB;AAAA;AAAE;;;;WAEvB,oBAAW;AACT,YAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;;WACD,mBAAU;AACR,YAAM,IAAIA,KAAJ,CAAU,uBAAV,CAAN;AACD;;;WAED,oBAAW;AACT,aAAO,KAAP;AACD;ICVkBC;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB;AAEA,UAAKC,MAAL,GAAc,EAAd;;AAEA,QAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACD;;AAPgB;AAQlB;;;;WAED,oBAAW;AACT,UAAIG,SAAS,GAAG,KAAKC,YAAL,EAAhB;;AAEA,UAAID,SAAS,CAACE,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOC,UAAU,CAACH,SAAD,CAAjB;AACD;;AAED,aAAO,CAAP;AACD;;;WAED,mBAAU;AACR,aAAO,KAAKC,YAAL,EAAP;AACD;;;WAED,gBAAOJ,KAAP,EAAc;AACZ,WAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACD;;;WAED,qBAAY;AACV,UAAMO,IAAI,GAAG,KAAKN,MAAL,CAAYI,MAAzB;;AACA,UAAIE,IAAI,GAAG,CAAX,EAAc;AACZ,aAAKN,MAAL,CAAYO,MAAZ,CAAmBD,IAAI,GAAG,CAA1B,EAA6B,CAA7B;AACD;AACF;;;WAED,sBAAa;AACX,WAAKN,MAAL,GAAc,EAAd;AACD;;;WAED,wBAAe;AACb,aAAO,KAAKA,MAAL,CAAYQ,MAAZ,CAAmB,UAACC,MAAD,EAASV,KAAT;AAAA,eAAmBU,MAAM,GAAGC,MAAM,CAACX,KAAD,CAAlC;AAAA,OAAnB,EAA8D,EAA9D,CAAP;AACD;;;WAED,oBAAW;AACT,aAAO,IAAP;AACD;;;;EA9CwCJ","file":"number_operand.1ab08c12.js","sourceRoot":"..\\10장 계산기 프로젝트","sourcesContent":["export default class AbstractOperand {\r\n  constructor(operand) {}\r\n\r\n  getValue() {\r\n    throw new Error(\"implement this method\");\r\n  }\r\n  getDesc() {\r\n    throw new Error(\"implement this method\");\r\n  }\r\n\r\n  isNumber() {\r\n    return false;\r\n  }\r\n}\r\n","import AbstractOperand from \"./abstract_operand\";\r\n\r\nexport default class NumberOperand extends AbstractOperand {\r\n  constructor(input) {\r\n    super();\r\n\r\n    this.inputs = [];\r\n\r\n    if (input !== null) {\r\n      this.inputs.push(input);\r\n    }\r\n  }\r\n\r\n  getValue() {\r\n    let inputText = this.getInputText();\r\n\r\n    if (inputText.length > 0) {\r\n      return parseFloat(inputText);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  getDesc() {\r\n    return this.getInputText();\r\n  }\r\n\r\n  append(input) {\r\n    this.inputs.push(input);\r\n  }\r\n\r\n  clearBack() {\r\n    const size = this.inputs.length;\r\n    if (size > 0) {\r\n      this.inputs.splice(size - 1, 1);\r\n    }\r\n  }\r\n\r\n  clearInput() {\r\n    this.inputs = [];\r\n  }\r\n\r\n  getInputText() {\r\n    return this.inputs.reduce((result, input) => result + String(input), \"\");\r\n  }\r\n\r\n  isNumber() {\r\n    return true;\r\n  }\r\n}\r\n"]}